{"version":3,"sources":["JSXServeFileTools.ts"],"names":[],"mappings":"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","file":"JSXServeFileTools.js","sourcesContent":["import { IJSXServeHandlerConfiguration } from \"./IJSXServeHandlerConfiguration\";\nimport { IJSXServeConfiguration } from \"./IJSXServeConfiguration\";\nimport { IJSXServeHandlerObject } from \"./IJSXServeHandlerObject\";\n\nimport * as fs from \"fs\";\nimport * as path from \"path\";\n\nexport module JSXServeFileTools {\n    \n    export const parseJSXServeConfiguration = function (_configuration: any) {\n    \n        const parseJSXServeHandlerConfiguration = function (_hconfiguration: any) {\n            if (!_hconfiguration.file) {\n                throw new Error(\"Configuration Parsing Error: file is required\");\n            }\n    \n            if (!_hconfiguration.alias && _configuration.defaults.mode === \"strict\") {\n                throw new Error(\"Configuration Parsing Error: alias is required in strict mode\");\n            }\n    \n            const supportedMethods = [\"POST\", \"PUT\", \"GET\", \"DELETE\"];\n            if (_hconfiguration.method !== undefined && supportedMethods.indexOf(_hconfiguration.method) === -1) {\n                throw new Error(\"Configuration Parsing Error: method is not supported\");\n            }\n    \n            return {\n                file: _hconfiguration.file,\n                alias: _hconfiguration.alias,\n                method: _hconfiguration.method || \"GET\"\n            } as IJSXServeHandlerConfiguration;\n        };\n    \n        return {\n            defaults: {\n                host: _configuration.defaults.host || \"127.0.0.1\",\n                mode: _configuration.defaults.mode || \"strict\",\n                port: _configuration.defaults.port || 8080,\n            },\n            handlers: (_configuration.handlers || []).map(parseJSXServeHandlerConfiguration)\n        } as IJSXServeConfiguration;\n    };\n    \n    /**\n     * get a list of the arguments of a function\n     * @param {Function} fn function to extract the required arguments from\n     */\n    export const extractFunctionArguments = function (fn: () => void) {\n    \n        const argumentMatchArray: string[] | null = (fn.toString()\n            .replace(/((\\/\\/.*$)|(\\/\\*[\\s\\S]*?\\*\\/)|(\\s))/mg, \"\")\n            .match(/^function\\s*[^\\(]*\\(\\s*([^\\)]*)\\)/m));\n    \n        if (argumentMatchArray === null) {\n            return [];\n        }\n    \n        const unprocessedArgs = argumentMatchArray[1].split(/,/);\n    \n        // regex edge case: when no args are specified, the regex will\n        // return an array with one element which is a empty string\n        if (unprocessedArgs.length === 1 && unprocessedArgs[0] === \"\") {\n            return [];\n        }\n    \n        return unprocessedArgs;\n    };\n        \n\n    /**\n     * check if a filename ends with an allowed extname\n     * @param {string[]} allowedExtnames list of extnames that are allowed\n     */\n    export const filterFilePathByExtname = function (allowedExtnames: string[]) {\n        return function (file: string) {\n            return allowedExtnames.indexOf(path.extname(file)) !== -1;\n        };\n    };\n\n    /**\n     * check if a path points to a file or a directory\n     * @param {string} file path to a file or a directory\n     */\n    export const fileIsDirectory = function (file: string) {\n        return fs.statSync(file).isDirectory();\n    };\n\n    /**\n     * scan a directory for files recursively, returning a list of all files \n     * @param {string} basePath directory path to start scanning for files\n     * @param {string} relPath not required when calling manually - stores the offset from the\n     * initial dir path\n     */\n    export const readDirRecursive = function (basePath: string, relPath: string = \"/\"): string[] {\n        const currentLevelDirPath = path.join(basePath, relPath);\n\n        /**\n         * recusively call readDirRecursive if the file argument\n         * is a directory\n         * @param {string} file filename\n         */\n        const conditionalRecursionMap = function (file: string): string | string[] {\n            const currentLevelRelativeFilePath = path.join(relPath, file);\n\n            if (fileIsDirectory(path.join(currentLevelDirPath, file))) {\n                return readDirRecursive(basePath, currentLevelRelativeFilePath);\n            }\n\n            return currentLevelRelativeFilePath\n        };\n\n        /**\n         * append an array or plain value to another array\n         * @param {any[]} array list of already processed elements\n         * @param {any | any[]} insertionVal value to append to the list of already processed elements\n         */\n        const reduceMultiDimensionalArray = function (array: string[], insertionVal: string | string[]): string[] {\n            if (insertionVal instanceof Array) {\n                return array.concat(insertionVal);\n            }\n\n            return array.concat([insertionVal]);\n        };\n\n        return fs.readdirSync(currentLevelDirPath)\n            .map<string | string[]>(conditionalRecursionMap)\n            .reduce<string[]>(reduceMultiDimensionalArray, [] as string[]);\n    };\n\n    export const importViewDir = function (_folder: string, _config: IJSXServeConfiguration) {\n        return readDirRecursive(_folder)\n            .filter(filterFilePathByExtname([\".js\", \".jsx\"]))\n            .reduce((handlers, file) => {\n                \n                const handlerConfiguration = _config.handlers.filter(f => f.file === file)[0] || {};\n    \n                // filter out the handler as no configuration is found when strict-mode is enabled\n                if (_config.defaults.mode === \"strict\" && Object.keys(handlerConfiguration).length === 0) {\n                    return handlers;\n                }\n    \n                const targetFileImport = require(path.join(_folder, file));\n    \n                if (typeof targetFileImport !== \"function\") {\n                    return handlers;\n                }\n    \n                const targetFileArguments = extractFunctionArguments(targetFileImport);\n                const targetFileUrlPath = (((f) => f[0] === \"/\" ? f.slice(1) : f)(handlerConfiguration.alias || file))\n                    .split(\"/\");\n    \n                return handlers.concat([{\n                    file: file,\n                    handler: targetFileImport,\n                    args: targetFileArguments,\n                    path: targetFileUrlPath,\n                    method: (handlerConfiguration as IJSXServeHandlerConfiguration).method || \"GET\"\n                }]);\n            }, [] as IJSXServeHandlerObject[]);\n    };\n}\n"],"sourceRoot":"/home/jakob/Dokumente/Entwicklung/github/jsx-serve/src"}